openapi: 3.0.0
info:
  title: Library Api
  description: Library Api
  version: 0.1.0

paths:
  /v1/auth/login:
    post:
      summary: Login endpoint
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  $ref: "#/components/schemas/email"
                password:
                  type: string
                  description: The user's password
      responses:
        200:
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication
        500:
          $ref: "#/components/responses/InternalServerError"
        400:
          $ref: "#/components/responses/BadRequest"

  /v1/auth/whoami:
    get:
      summary: Retrieve user information
      description: Get the current user's details.
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful response with user details
          content:
            application/json:
              schema:
                type: object
                properties:
                  Id:
                    $ref: "#/components/schemas/uuid"
                  Name:
                    $ref: "#/components/schemas/userName"
                  Email:
                    $ref: "#/components/schemas/email"
                  Avatar:
                    $ref: "#/components/schemas/uri"
        500:
          $ref: "#/components/responses/InternalServerError"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"

  /v1/books:
    get:
      summary: Get a list of books
      security:
        - bearerAuth: []
      tags:
        - Books
      responses:
        200:
          description: A list of books
          security:
            - bearerAuth: []
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    Id:
                      $ref: "#/components/schemas/uuid"
                    Title:
                      $ref: "#/components/schemas/bookTitle"
                    Author:
                      $ref: "#/components/schemas/author"
                    PublicationYear:
                      $ref: "#/components/schemas/publicationYear"
                    Genres:
                      $ref: "#/components/schemas/genres"
        500:
          $ref: "#/components/responses/InternalServerError"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"

  /v1/books/{bookId}:
    get:
      summary: Get book details by ID
      security:
        - bearerAuth: []
      tags:
        - Books
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the book
          schema:
            $ref: "#/components/schemas/uuid"
      responses:
        200:
          description: Successfully retrieved book details
          content:
            application/json:
              schema:
                type: object
                properties:
                  Id:
                    $ref: "#/components/schemas/uuid"
                  Title:
                    $ref: "#/components/schemas/bookTitle"
                  Author:
                    $ref: "#/components/schemas/author"
                  PublicationYear:
                    $ref: "#/components/schemas/publicationYear"
                  Description:
                    type: string
                  CoverImage:
                    $ref: "#/components/schemas/uri"
                  Genres:
                    $ref: "#/components/schemas/genres"
                  UpdatedAt:
                    $ref: "#/components/schemas/timestamp"
                  CreatedAt:
                    $ref: "#/components/schemas/timestamp"
        500:
          $ref: "#/components/responses/InternalServerError"
        404:
          $ref: "#/components/responses/NotFound"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"

  /v1/readers:
    get:
      summary: Retrieve a list of readers
      description: Returns an array of reader objects with details.
      tags:
        - Readers
      security:
        - bearerAuth: []
      responses:
        200:
          description: A list of readers
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    Id:
                      $ref: "#/components/schemas/uuid"
                    Name:
                      $ref: "#/components/schemas/userName"
                    Email:
                      $ref: "#/components/schemas/email"
                    Avatar:
                      $ref: "#/components/schemas/uri"
                    CreatedAt:
                      $ref: "#/components/schemas/timestamp"
        500:
          $ref: "#/components/responses/InternalServerError"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"

  /v1/readers/{readerId}:
    get:
      summary: Get Reader Details
      description: Retrieve details of a specific reader using their unique reader ID.
      tags:
        - Readers
      security:
        - bearerAuth: []
      parameters:
        - name: readerId
          in: path
          required: true
          description: The unique identifier of the reader.
          schema:
            $ref: "#/components/schemas/uuid"
      responses:
        200:
          description: Successful response with reader details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  Id:
                    $ref: "#/components/schemas/uuid"
                  Name:
                    $ref: "#/components/schemas/userName"
                  Email:
                    $ref: "#/components/schemas/email"
                  Avatar:
                    $ref: "#/components/schemas/uri"
                  CreatedAt:
                    $ref: "#/components/schemas/timestamp"
        500:
          $ref: "#/components/responses/InternalServerError"
        404:
          $ref: "#/components/responses/NotFound"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"

  /v1/readers/{readerId}/books:
    get:
      summary: Retrieve a list of books for a specific reader
      tags:
        - Readers
      security:
        - bearerAuth: []
      parameters:
        - name: readerId
          in: path
          required: true
          description: Unique identifier for the reader.
          schema:
            $ref: "#/components/schemas/uuid"
      responses:
        200:
          description: A list of books for the specified reader.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    Id:
                      $ref: "#/components/schemas/uuid"
                    UserId:
                      $ref: "#/components/schemas/uuid"
                    UserName:
                      $ref: "#/components/schemas/userName"
                    BookId:
                      $ref: "#/components/schemas/uuid"
                    BookTitle:
                      $ref: "#/components/schemas/bookTitle"
                    Status:
                      $ref: "#/components/schemas/bookingStatus"
                    ReturnDate:
                      $ref: "#/components/schemas/nullableDate"
                    CollectedDate:
                      $ref: "#/components/schemas/nullableDate"
                    ReturnedDate:
                      $ref: "#/components/schemas/nullableDate"
                    CreatedAt:
                      $ref: "#/components/schemas/timestamp"
                    UpdatedAt:
                      $ref: "#/components/schemas/timestamp"
        500:
          $ref: "#/components/responses/InternalServerError"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /v1/books/requests:
    get:
      summary: Retrieve a list of book requests
      tags:
        - Booking Requests
      security:
        - bearerAuth: []
      responses:
        200:
          description: A list of book requests
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    Id:
                      $ref: "#/components/schemas/uuid"
                    UserId:
                      $ref: "#/components/schemas/uuid"
                    UserName:
                      $ref: "#/components/schemas/userName"
                    BookId:
                      $ref: "#/components/schemas/uuid"
                    BookTitle:
                      $ref: "#/components/schemas/bookTitle"
                    Status:
                      $ref: "#/components/schemas/bookingStatus"
                    ReturnDate:
                      $ref: "#/components/schemas/nullableDate"
                    CollectedDate:
                      $ref: "#/components/schemas/nullableDate"
                    ReturnedDate:
                      $ref: "#/components/schemas/nullableDate"
                    CreatedAt:
                      $ref: "#/components/schemas/timestamp"
                    UpdatedAt:
                      $ref: "#/components/schemas/timestamp"
        500:
          $ref: "#/components/responses/InternalServerError"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"

  /v1/books/{bookId}/requests:
    post:
      summary: Create a request for a book
      description: This endpoint allows you to create a request for a specific book identified by its `bookId`.
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/uuid"
      responses:
        200:
          description: Successful request creation
          content:
            application/json:
              schema:
                type: object
                properties:
                  Id:
                    $ref: "#/components/schemas/uuid"
        500:
          $ref: "#/components/responses/InternalServerError"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"

  /v1/books/requests/{requestId}/approve:
    patch:
      summary: Approve a book request
      description: Marks a book request as collected by reader by the provided request ID.
      tags:
        - Booking Requests
      security:
        - bearerAuth: []
      parameters:
        - name: requestId
          in: path
          required: true
          description: The ID of the book request to approve
          schema:
            $ref: "#/components/schemas/uuid"
      requestBody:
        description: Request payload to approve the book request
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: "#/components/schemas/uuid"
                bookId:
                  $ref: "#/components/schemas/uuid"
                date:
                  $ref: "#/components/schemas/timestamp"
      responses:
        200:
          description: Successful approval of the book request
          content:
            application/json:
              schema:
                type: object
                properties:
                  Id:
                    $ref: "#/components/schemas/uuid"
        500:
          $ref: "#/components/responses/InternalServerError"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"

  /v1/books/requests/{requestId}/return:
    patch:
      summary: Return a book request
      description: Marks a book request as returned by the provided request ID.
      tags:
        - Booking Requests
      security:
        - bearerAuth: []
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: "#/components/schemas/uuid"
                bookId:
                  $ref: "#/components/schemas/uuid"
              required:
                - userId
                - bookId
      responses:
        200:
          description: Successful response with the request ID.
          content:
            application/json:
              schema:
                type: object
                properties:
                  Id:
                    $ref: "#/components/schemas/uuid"
        500:
          $ref: "#/components/responses/InternalServerError"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: uuid

  schemas:
    error:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string

    uuid:
      type: string
      format: uuid
      example: "2f358541-2bba-4c25-b187-52de3039179f"

    timestamp:
      type: string
      format: date-time
      example: "2024-07-21T09:10:04.189556Z"

    nullableDate:
      type: object
      properties:
        Time:
          type: string
          format: date-time
          description: Date and time when the event occurred.
        Valid:
          type: boolean
          description: Indicates if the date is valid.
      required:
        - Time
        - Valid

    bookingStatus:
      type: string
      enum:
        - collected
        - returned
        - pending
      description: Status of the book.

    uri:
      type: string
      format: uri
      example: "https://example.com/images/7.jpg"

    email:
      type: string
      format: email
      example: "olivia.davis@test.com"

    userName:
      type: string
      example: "Olivia Davis"

    bookTitle:
      type: string
      description: The Hitchhiker's Guide to the Galaxy.

    author:
      type: string
      example: "Mary Shelley"

    publicationYear:
      type: string
      example: "1818"

    genres:
      type: array
      items:
        type: string
      example:
        - "Science Fiction"
        - "Gothic"

  responses:
    Forbidden:
      description: Access Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"

    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"

    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
